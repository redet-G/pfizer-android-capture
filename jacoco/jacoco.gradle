apply plugin: 'jacoco'

task jacocoReport(type: JacocoReport) {
    group "Coverage"
    description "Generate XML/HTML code coverage reports for coverage.ec"

    sourceDirectories.setFrom("${project.projectDir}/src/main/java")

    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // butterKnife
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            // dagger
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // DHIS2 Android SDK fields
            '**/*AutoValue_*.*'
    ]

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/dhisDebug", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/dhisDebug", excludes: excludes)

    classDirectories.setFrom(files([
            javaClasses,
            kotlinClasses
    ]))

    def unitTestsData = fileTree(dir: "${buildDir}/jacoco", includes: ['*.exec'])
//    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage", includes: ['**/*.ec'])

    executionData.setFrom(files([
            unitTestsData
//            androidTestsData
    ]))

    reports {
        csv.required = false // change if needed
        xml {
            enabled true
            destination file("${buildDir}/coverage-report/jacocoTestReport.xml")
        }
        html {
            enabled true
            destination file("${buildDir}/coverage-report")
        }
    }
}

/*project.afterEvaluate { project ->
    setupAndroidReporting()
}*/

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            System.out.println("Task -> $testTaskName")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                        //custom filter for dhis2
                        '**/databinding/*.*',
                        '**/customviews/*.*',
                        '**/ui/*.class',
                        '**/*Activity.*',
                        '**/Activity*.*',
                        '**/*Activity*.*',
                        '**/*Fragment.*',
                        '**/Fragment*.*',
                        '**/*View.*',
                        '**/*Adapter.*',
                        '**/*Contract*.*',
                        '**/*Bindings*.*',
                        '**/AutoValue*.*',
                        '**/*$*',
                        '**/*Navigator.*',
                        '**/*$*$*.*',
                        '**/animations/*.*',
                        '**/*Holder*.*',
                        '**/*Dialog*.*',
                        '**/*Service*.*',
                        '**/*Button*.*',
                        '**/SearchTEList.*',
                        '**/lambda$*$*.*'
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files([javaTree], [kotlinTree])
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    csv.required = false // change if needed
                    xml {
                        enabled true
                        destination file("${buildDir}/coverage-report/jacocoTestReport.xml")
                    }
                    html {
                        enabled true
                        destination file("${buildDir}/coverage-report")
                    }
                }
            }
        }
    }
}

android {
    buildTypes {
        debug {
            // jacoco test coverage reports both for
            // androidTest and test source sets
            testCoverageEnabled = false
        }
    }
}
