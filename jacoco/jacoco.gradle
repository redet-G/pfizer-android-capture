apply plugin: 'jacoco'

tasks.register('jacocoReport', JacocoReport) {
    group "Coverage"
    description "Generate XML/HTML code coverage reports for coverage.ec"

    sourceDirectories.setFrom("${project.projectDir}/src/main/java")

    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
            //custom filter for dhis2
            '**/databinding/*.*',
            '**/customviews/*.*',
            '**/ui/*.class',
            '**/*Activity.*',
            '**/Activity*.*',
            '**/*Activity*.*',
            '**/*Fragment.*',
            '**/Fragment*.*',
            '**/*View.*',
            '**/*Adapter.*',
            '**/*Contract*.*',
            '**/*Bindings*.*',
            '**/AutoValue*.*',
            '**/*$*',
            '**/*Navigator.*',
            '**/*$*$*.*',
            '**/animations/*.*',
            '**/*Holder*.*',
            '**/*Dialog*.*',
            '**/*Service*.*',
            '**/*Button*.*',
            '**/SearchTEList.*',
            '**/lambda$*$*.*'
    ]

    def javaClassesApp = fileTree(dir: "${buildDir}/intermediates/javac/dhisDebug", excludes: excludes)
    def kotlinClassesApp = fileTree(dir: "${buildDir}/tmp/kotlin-classes/dhisDebug", excludes: excludes)
    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)

    classDirectories.setFrom(files([
            javaClassesApp,
            kotlinClassesApp,
            javaClasses,
            kotlinClasses
    ]))

    def unitTestsData = fileTree(dir: "${buildDir}/jacoco", includes: ['*.exec'])
    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage", includes: ['**/*.ec'])

    executionData.setFrom(files([
            unitTestsData,
            androidTestsData
    ]))

    reports {
        csv.required = false // change if needed

        xml.required = true
        xml.outputLocation = file("${buildDir}/coverage-report/jacocoTestReport.xml")

        html.required = true
        html.outputLocation = file("${buildDir}/coverage-report")
    }
}

android {
    buildTypes {
        debug {
            // jacoco test coverage reports both for
            // androidTest and test source sets
            testCoverageEnabled = false
        }
    }
}
